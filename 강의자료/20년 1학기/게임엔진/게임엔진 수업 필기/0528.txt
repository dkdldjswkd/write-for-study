11p
버튼을 만들고 캔버스여도 되고 부모 트렌스폼이여도 다 똑같이 작용한다.
앵커들을 여러군대 바꿔가면서 부모에 사각형에 크기나 위치가 바뀔때 자식 콘트롤들의 위치나 크기가 어떻게 바뀌는지 이해하고 테스트해본다
13p
11p에 대한 내용을 테스트해본 장면
15p
화면에다가 무언가를 보여주기 위한 비쥬얼 컨포넌트
ui원소들을 사용자가 마우스나 터치같은 거로 사용할때 그 이벤트들을 알려주기 위한 인터렉션 컨포넌트로 크게 구분이 되어있다.
모든 ui원소들은 시각적인 컨포넌트도 가지고 있고 또하나는 인터렉션을 위한 컨포넌트도 가지고 있는데
시각적인 컨포넌트는 크게 텍스트와 이미지로 나뉜다 
텍스트 - 글씨를 3d mash를 사용해서 글씨를 그려준다
         - 어떤 매시가 나올지 창에 쓸수있다.
         -  	 	
이미지 - 매스크를 제외하면 다 시각적인 컨포넌트에 해당하는것
         - 이미지도 바꿀수 있다.
         - 이미지인 경우에는 어떤 형태들도 이미지 컨포넌트들로 사용하게 되느냐의 에셋을 인폴트하는 과정에 여러가지 형태들로 
	이미지 에셋(스프라이트)을 선택할 수 있게한다.
16p
추가적으로 effect 컨포넌트를 보면 3개를 선택할 수있는데 이중에 2개는 텍스트들에 대해서 텍스트를 그려준다.
그림자 효과 - 텍스트 효과(그림자 색깔을 지정해줄수 있다)
Effect distance - x축과 y축으로 얼마만큼 늘릴 것이냐?

아웃라인 효과 - 텍스트의 부분에 경계선을 그려서 경계선의 색깔을 바꿀수 있다.
UVI효과 - uvi좌표 모든 정점들은 uvi좌표를 가질 수 있다. uvi좌표들을 포지션의 의미로 사용하는 스크립트 
프로그램 설명
17p
인터렉션 컨포넌트
 - ui원소들을 사용하는 이유는 보여주는 형식이 아니라 그 버튼을 누르면 눌려졌다는 사실을 통지를 받고 내가 어떤일을 하기 위함
 - 마우스나 키보드하고 연동이 되어서 실제 프로그램에 알려주는 역할
 - 시각적인 컨포넌트가 있어 사용자들이 선택을 하면 인터렉션이 일어나야 한다.
 - 모든 상호작용 컨포넌트 들은 기본적인 정상상대, 하이라이트, 눌림, 비활성화 상태들을 가지고 있다. 상태들의 전이들을 시각적으로 보여주기 위한 속성을 가지고 있다.
interactable
 - ui 컨포넌트가 사용자 입력을 받아가지고 ui들을 상호작용을 할 수 있게 만드느냐 interactable 홀수로 만들면 상호작용을 못하니 disable상태가 된다
transition 
 - ui 컨포넌트들의 상태 전이를 할것이냐? 우리가 정상 상태에서 클릭을 하면 상태들이 바뀌는데 그런 상태들의 전이들을 표시해준다
navigation
 - 움직이는 순서들을 정해주는 의미가 된다.
프로그램 설명
모든 상호작용 컴포넌트들은 3개의 요소를 가지고 있고 거기에 추가적으로 조금씩 다르게 되어있다.
상호작용 이벤트 컴포넌트들은 적어도 하나의 유니티 이벤트를 가지고 있는데
버튼 같은경우는 onclick
어떤 값을 입력 받는 컨트롤은 valuechanged
입력 같은 경우는 편집이 끝났는지
그런 것들을 알려주기 위한 이벤트들을 추가할 수 있는 부분이 유니티이벤트
상호작용 컨포넌트에 해당하는 것들(버튼, 토글, 토글 그룹...)
18p
상호작용 ui컨포넌트
- 버튼 같은경우는 transition이라는 부분의 기본 칼라틴트인데 색상을 넣어 노말에서 프래스로 바뀌면 또는 하이라이트로 바뀌면 이런색으로 그릴거야라고 표현가능
- 전이 방법을 스프라이트 스왑으로 즉 이미지를 바꿔주는거로 설정할 수 있다. 버튼에 따라서 이미지를 바꿔줄때 그 이미지에 해당하는 스프라이트 2d이미지를 연결하면
  정상 상태일때는 button(image)로 보이다가 하이라이트(누르거나)가 되면 하이라이트 스프릿 이미지로 바뀐다.
- 애니메이션이란것을 넣어서 애니메이션 컨트롤러를 통해서 트렌지션이 바뀌는 것을 조정할 수 있다.
  (즉 애니메이션은 모션을 의미하고 2d는 이미지를 말한다. 버튼의 모양이 바뀌거나 애니메이션이 일어나게 할 수 있다.)
프로그램 설명
19p
잠시 넘어감
20p
예제 설명
여러개의 ui원소를 만듬 스크롤바, 텍스트, 인포필드, 토글 등등을 만듬
 - navugation의 속성은 이미지 버튼에서 화살표를 누르면 어느 버튼이 입력을 받을 수 있을게 자동으로 넘어가게 할것이냐?
   그게 nacvigation이다. default는 오토매틱으로 되어있다(자동으로 만들어진 순서대로 이동한다.)
 - navugation의 속성을 none으로 바꾸면 인포포커스를 그렇게 바꿔주지 않겠다. 
 - everything으로 하면 모든 방향으로 움직일 수 있게 하겠다.
 - Automatic 만들어진 순서대로 navigation이될 수 있도록 내부적인 데이터를 만들어 내는것
 - explicit를 하면 사용자가 끌어다가 연결할수 있다.
 - visualize는 네이게이션 순서들을 노란색 화살표로 나타내어 확인시켜준다.(입력포커스를 옮기는 것은 마우스만 있다면 굳이 신경쓸 필요가 없다)
21p
그냥 설정메뉴 설명
22p
대부분의 이벤트 함수들은 return 타입은 void이고 이벤트들에 따라서 상태들을 파라메터로 전달하는 경우도 있다.
 * 토글박스 체크하면 선택 한번더 하면 언 체크
   (밑에 플러스를 눌러 이벤트 추가)
 - 토글클릭을 했는지 안했는지는 bool로 알려준다.
 - 토글같은 경우에는 한개만 있으면 토글 버튼을 만들면되는데 여러개의 토글 버튼을 묶어서 3개중에 하나만 체크하고 싶으면 보기 3개를
   토글그룹의 차일드로 만들어주면 된다.(먼저 토글 그룹을 만들고 토글 그룹의 차일드로 3개의 보기를 만들어주면 3개중의 하나만 체크를
   할 수 있게 만들어준다)
23p
 * 슬라이더(이미지의 컨트롤의 동그라미를 움직여가지고 값을 리턴 받는것)
 - 이벤트는 unvaluechanged 동그라미 컨트롤러가 움직이면 값이 바뀌니까 value가 바뀌니까 float파라메터를 통해서 현재의 값을 float value로
   넘겨준다.
24p
 * 스크롤바
 - 슬라이더와 유사한 설명
25p
 * 드랍다운
 - 이미지 옵션들의 부분에다가 +눌렀을때 옵션들의 아이템들을 추가한다.
 - 이미지도 연결한다면 이미지도 보일 수 도 있다.
 - 다른점은 float사용하는거와 다르게 int index를 사용한다.
26p
 * 입력 필드
 - 어떤 문자열들을 입력 받고 싶을 때 사용
 - 이벤트가 두개이다.(하나는 value change-대부분은 이것은 필요없다., 또다른 하나는 end edit이다)
 - 문자열이 바뀔때마다 "OnEditchanged()" + text가 출력된다.
 - 문자를 끝내는 표시나 버튼을 누를 때 OnEndEdit 출력
27p
 * 스크롤 사각형
 - 내용이 많아서 스크롤 할 수 있는 바
 - 이벤트는 value changed
 - 현재 스크롤의 위치를 나타내는 vector2 x,y가 넘어 온다. 
28p
자동 레이아웃 컨퍼넌트
 - 레이아웃을 추가하면 자동적으로 처리해주거나 내가 정한 기준에 따라서 그 기준에 맞게 배치를 처리해준다.
프로그램 설명
이정도로 마침
입력처리 input(ppt)
2p
프로그램 설명
 - 유니티 입력 매니저라는 가상 입력 축이라고 하는 것들을 문자열로 정의로 해서 만들어 놓고 그 축 입력들에 대해서 어떤 입력을 받을
   수 있도록 처리를 해준다.
 - 축 이름을 기억하는게 중요하다.(이미지 왼쪽에 있는 글씨들 herizontal,vertical,fire1등등)
3p
 - 매니저에서 설정이 되어있는 대로 현재 축에 대한 어떤 값을 리턴을 하거나 또는 키보드의 어떤 키가 눌리거나 마우스의 이동량을 알고
   싶을때 사용 하는  입력 클래스(input)가 제공된다.
 - 입력클래스에 있는 모든 속석이나 멤버함수는 static이다.
 - 기본적으로 input.anykey 어떤키라도 눌려지면 true가 된다.
 - anykeyDowm 어떤키라도 눌려진 상태이냐
 - imput.mouseposition(화면 좌표는 좌측(0,0) x는 오른쪽으로 y는 위로 가면서 증가하는 좌표<>윈도우api에서는 좌측 상단이 원점이라
   y의 의미가 반대가 된다.)
 - acceleration, touche, gyro, compass는 모바일 속성에서 사용하는것이다.
4p
 - get으로 시작하는 입력을 넘겨받기 위한 함수들이 역시 static으로 여러가지 있다.
 - getaxis에서 axis는 아까 input manager에서 문자열들로 정의된 축들의 이름을 주고 현재 입력 축의 값들을 입력받기 위한것
 - 가장 대표적인 것은 herizontal와 vertical을 주로 쓴다. fire축의 입력을 받고 싶으면 fire를 넣으면 현재값이 넘어온다.
 - getbutton에서 button은 마우스의 버튼을 의미한다.
 - getbutton
 - 진한색들과 연한색들의 차이
   getbutton,getkey,getmousebutton - 언제 눌려졌는지 상관 없이 현재 눌려진 상태이면 true 반환
   buttondown...,keydown...,mousebuttondown... - 그 프레임 내에서 60분의 1초 동안에 눌려지거나 떼어지면 true 반환
 - getbutton 여기서에 버튼은 가상입력 축을 입력 받는다.
 - getkey 키보드 값을 입력 받는다.
 - getmousebutton 마우스 버튼
5p
 - getaxis란 함수는 입력 축에 이름을 주고 그 축에 방향에 해당하는 입력 값을 리턴 받는것(연결 받는 놈이 키보드, 마우스 등 아무거나 상관
   없다. 유니티가 중간에서 다 해결해주고 축의 이름으로 값을 리턴해준다.리턴 값음 float다)
 - getkey, getbutton, getmouse는 눌려지면 true 아니면 false의 값을 리턴받는다.  
 *getaxis의 사용예는 7p이다.
 - input.getaxis("horizontal")는 x축, input.getaxis("vertical")는 y축 그 축에 있는 현재값을 리턴 만약 float를 리턴하는데 눌리지 않으면 0이고
   그런데 +방향에 해당하는 값이 눌려졌으면 +값이 리턴되고 최대로 1 음수는 -1사이의 값이 리턴된다.
 - x축과 y축으로 움직이는 양을 조절하면 회전이든 연속적인 움직임이들을 구현하는게 가능하다.
 - 축의 이름을 외우놔야 한다. 
 다시 5p지
 - 움직이 양으로 쓰기 위한 함수는 getaxis, 눌려졌는지 안눌려졌는지에 대한것을 알고 싶을때는 getkey, getbutton, getmousebutton
질문
9p 
 - 디지털키보드는 0 또는 1밖에 안댄다 안눌렸을때는 0 눌렸을때는 1
 - sensitivity랑 gravity를 정하면 그 값들도 바뀌는 것처럼 보여준다(예를들어 조이스틱). 



		
   
 